input {
## read RabbitMQ logfile and process entries as type "rabbit"
  file {
    type => "rabbit"
    path => "/usr/local/var/log/rabbitmq/*.log"
  }
## read BigCouch logfile and process entries as type "couch"
  file {
    type => "couch"
    path => "/usr/local/var/log/couchdb/couch.log"
  }
## for testing, read STDIN and paste sample messages
## uncomment whichever type you are debugging
#   stdin { type => "couch" }
#   stdin { type => "rabbit" }
}

filter {
## join multi-line rabbit messages: first line of each group starts with =
  multiline {
    type => "rabbit"
    pattern => "^="
    negate => true
    what => "previous"
  }
## parse rabbit header line for report_type (which maps to severity) and time
  grok {
    type => "rabbit"
    patterns_dir => "patterns"
    pattern => "^=%{WORD:report_type} REPORT=+ %{RABBIT_TIME:time_text} ===.*$"
  }
## parse rabbit date format
  date {
    type => "rabbit"
    time_text => "dd-MMM-yyyy::HH:mm:ss"
  }
## copy the full message into another field
## and in the next mutate remove the header line
## @message in logstash becomes the "full message" in graylog2
## message in logstash becomes the (shorter) "message" in graylog2
  mutate {
    type => "rabbit"
    add_field => [ "message", "%{@message}" ]
  }
  mutate {
    type => "rabbit"
    gsub => [
      "message", "^=[A-Za-z0-9: =-]+=\n", "",
## map the rabbit report types to graylog2 severity levels
      "report_type", "INFO", "1",
      "report_type", "WARNING", "3",
      "report_type", "ERROR", "4",
      "report_type", "CRASH", "5",
      "report_type", "SUPERVISOR", "5"
    ]
  }
## join multiline couchdb messages: first line begins with [
## ex: [Mon, 30 Apr 2012 23:52:53 GMT] [info] [<0.250.0>] checkpointing...
  multiline {
    type => "couch"
    pattern => "^\["
    negate => true
    what => "previous"
  }
## parse couch header line for time and severity
  grok {
    type => "couch"
    patterns_dir => "patterns"
    pattern => "^\[%{WORD:day_name}, %{COUCH_TIME:time_text}\] \[%{WORD:level}\] .*$"
  }
## for some reason, logstash won't parse GMT as a timezone (or many other variants)
## but found that -0000 seems to work
## NOTE: need explicit timezone or will assume time from message is in local timezone)
  mutate {
    type => "couch"
    gsub => [
      "time_text", "GMT", "-0000"
    ]
## add duplicate message field to distinguish full_message from message
    add_field => [ "message", "%{@message}" ]
  }
## parse couch timestamp
  date {
    type => "couch"
    time_text => "dd MMM yyyy HH:mm:ss Z"
  }
## map couch/erlang severity names to graylog2 levels
  mutate {
    type => "couch"
    gsub => [
      "message", "^\[[^\[\]]+\] \[[^\[\]]+\] \[[^\[\]]+\] ", "",
      "level", "info", "1",
      "level", "notice", "2",
      "level", "warning", "3",
      "level", "error", "4",
      "level", "alert", "5",
      "level", "critical", "5",
      "level", "emergency", "5"
    ]
  }
}

output {
## send rabbit messages to graylog2 with appropriate facility and severity
  gelf {
    type => "rabbit"
    host => "graylog.oceanobservatories.org"
    facility => "rabbit"
    level => "%{report_type}"
  }
## send couch messages to graylog2 with appropriate facility and severity
  gelf {
    type => "couch"
    host => "graylog.oceanobservatories.org"
    facility => "couch"
    level => "%{level}"
  }
## for debugging, write message to STDOUT to see results right away
#  stdout { debug => true }
}
