input {
## read RabbitMQ logfile and process entries as type "rabbit"
  file {
    type => "rabbit"
    path => "/var/log/rabbitmq/*.log"
  }
## for testing, read STDIN and paste sample messages
#   stdin { type => "rabbit" }
}

filter {
## join multi-line rabbit messages: first line of each group starts with =
  multiline {
    type => "rabbit"
    pattern => "^="
    negate => true
    what => "previous"
  }
## parse rabbit header line for report_type (which maps to severity) and time
  grok {
    type => "rabbit"
    patterns_dir => "patterns"
    pattern => "^=%{WORD:report_type} REPORT=+ %{RABBIT_TIME:time_text} ===.*$"
  }
## parse rabbit date format
  date {
    type => "rabbit"
    time_text => "dd-MMM-yyyy::HH:mm:ss"
  }
## copy the full message into another field
## and in the next mutate remove the header line
## @message in logstash becomes the "full message" in graylog2
## message in logstash becomes the (shorter) "message" in graylog2
  mutate {
    type => "rabbit"
    add_field => [ "message", "%{@message}" ]
  }
  mutate {
    type => "rabbit"
    gsub => [
      "message", "^=[A-Za-z0-9: =-]+=\n", "",
## map the rabbit report types to graylog2 severity levels
      "report_type", "INFO", "1",
      "report_type", "WARNING", "3",
      "report_type", "ERROR", "4",
      "report_type", "CRASH", "5",
      "report_type", "SUPERVISOR", "5"
    ]
  }
}

output {
## send rabbit messages to graylog2 with appropriate facility and severity
  gelf {
    type => "rabbit"
    host => "graylog.oceanobservatories.org"
    facility => "rabbit"
    level => "%{report_type}"
  }
## for debugging, write message to STDOUT to see results right away
#  stdout { debug => true }
}
